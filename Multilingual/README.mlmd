.languages fr=fr_FR,en=en_UK main=en
.numbering 2::1:.,3::1

# Multilingual Markdown Generator .fr((Générateur de Markdown Multilingue .)).all((MLMD.))

MLMD generates one or more Markdown files for a set of declared languages from one or more
multilingual source files, using directives in the files to distinguish each language parts.
.fr((MLMD génère des fichiers Markdown dans plusieurs langues à partir de fichiers sources
multilingues grâce à des directives placées dans les fichiers pour distinguer les parties
propres à chaque langue..))

MLMD is a convenient way of keeping the documentation structure in unique files without having
to duplicate them for each target language, and permits the translation by different authors while
keeping the file in a unique and shared place. Being text files, the MLMD multilingual sources
work well with versioning systems like Git.
.fr((MLMD est un moyen simple pour conserver la structure d'une documentation dans des fichiers
uniques sans avoir à les dupliquer pour chaque langue, et facilite la rédaction par plusieurs
traducteurs se partageant les fichiers. Les fichiers sources multilingues sont de simples
fichiers texte et s'utilisent facilement avec les systèmes de contrôle de version comme Git.))

MLMD can add tables of content (TOC) in the generated Markdown files and allow a numbering scheme
to be applied on all headings in all files and in tables of content. Table of contents can be
global and include headings from all the input files, or they can be local to their own file.
.fr((MLMD peut ajouter des sommaires (table des matières) et numéroter les titres dans les fichiers
et les sommaires. Une table des matières peut être globale et inclure les titres de tous les
fichiers en entrée ou rester locale et n'inclure que les titres de son propre fichier..))

The user has control over the generated languages, the table of content generation and the
headings numbering scheme using either command line parameters or directives in source files.
.fr((L'utilisateur contrôle les langues, la génération des sommaires et le schéma
de numérotation des titres par le biais de paramètres de la ligne de commande ou par
des directives placées dans les fichiers sources..))

.toc title=Table Of Contents.fr((Sommaire.)) level=2-3

## Installation

MLMD consists of a main PHP 7 script `mlmd.php` and a set of dependencies PHP files. The script and its
dependencies files can be put anywhere at user choice.
.fr((MLMD est constitué d'un script principal `mlmd.php` et de dépendances. Le script et ses
dépendances peuvent être placés dans n'importe quel répertoire accessible à l'utilisateur..))

### PHP version.fr((Version PHP.))

MLMD has been tested with PHP 7.3 CLI version. Version 7.2 at least is required.
.fr((MLMD a été testé avec PHP 7.3 CLI. La version 7.2 minimale est requise..))

To make sure PHP is accessible from a command line type the following command:
.fr((La commande suivante permet de vérifier que PHP est accessible depuis une ligne de commande :.))

```code
php -v
```

It should display something like the following lines (exact text may vary):
.fr((Des lignes similaires aux suivantes doivent s'afficher (le texte exact peut varier) :.))

```code
PHP 7.3.20 (cli) (built: Jul  9 2020 23:50:54) ( NTS )
Copyright (c) 1997-2018 The PHP Group
Zend Engine v3.3.20, Copyright (c) 1998-2018 Zend Technologies
    with Zend OPcache v7.3.20, Copyright (c) 1999-2018, by Zend Technologies
```

The directory where the PHP installation and its setting files lie can be displayed with `php --ini`.
.fr((Le répertoire d'installation de PHP et de ses fichiers de configuration peut être affiché avec
la commande `php --ini`..))

PHP 7.2 may work but have not been tested. The Multibyte extension (mb) is needed but should not
imply a specific setting as it should be embedded in standard PHP 7.3 distributions.
.fr((PHP 7.2 peut fonctionner mais n'a pas été testé. L'extension MultiByte (mb) est utilisée mais
ne nécessite pas de réglage particulier car elle est intégrée par défaut dans les distributions
standards de PHP 7..))

### Storing MLMD .fr((Emplacement de MLMD.))

The PHP script and its dependencies must be put in a directory with easy user access, e.g.:
.fr((Le script et ses dépendances doivent se situer dans un répertoire accessible à l'utilisateur, par exemple :.))

.all((
- `~/phpscripts` .((on.)).fr((sur.)) macOS/Linux
- `%HOMEDRIVE%%HOMEPATH%\phpscripts` .((on.)).fr((sur.)) Windows
.))

Parameters that can be passed to the script are described in [How To Use MLMD](#how-to-use-mlmd)
.fr((Les paramètres du script sont décrits dans la partie [Utilisation de MLMD](#utilisation-de-mlmd).))

### Using an alias to launch MLMD.fr((Utilisation d'un alias pour lancer MLMD.))

This is optional and allows to type `mlmd` as if it were a command of the Operating System or
command shell. Without aliases, the script must be launched by typing `php <your_path_to_mlmd>/mlmd.php`.
.fr((Ce qui suit est facultatif mais permet d'utiliser le script MLMD comme s'il était une commande
du système d'exploitation. Sans les alias, le script doit être exécuté en tapant `php <chemin>/mlmd.php`
avec le chemin où ont été stockés le script et ses dépendances..))

The commands detailed in the following examples must be adapted to the directory where the script has
been stored.
.fr((Les commandes indiquées ci-après doivent être adaptées pour le répertoire où se situe
le script..))

#### Linux / macOS / OS X

- The following alias command must be put in the shell startup script
(most likely `~/.bashrc`, `~/.zshrc` etc):
.fr((- La commande suivante peut être placée dans le script de démarrage
du shell (en général `~/.bashrc`, `~/.zshrc` etc) :.))

```code
alias mlmd=php ~/phpscripts/mlmd.php
```

#### Windows 10

- A text file must be created (e.g. using NOTEPAD.EXE) containing the following line:
.fr((- Un fichier texte doit être créé - par exemple avec le Bloc Note - contenant la ligne suivante :.))

```code
doskey mlmd=php %HOMEDRIVE%%HOMEPATH%\phpscripts\mlmd.php $*
```

- The file can be saved as `MLMD.CMD`or `mlmd.cmd` (letters case is ignored by Windows.) on the Desktop
or any user accessible directory.
.fr((- Le fichier est enregistré sous le nom `MLMD.CMD` ou `mlmd.cmd`
(Windows ne différencie pas minuscules et majuscules dans les noms de fichiers.) sur le bureau ou dans
n'importe quel répertoire accessible à l'utilisateur..))

- A shortcut to this CMD file must be created (right-click on file in Explorer, then create shortcut).
.fr((- Un raccourci vers ce fichier est créé par un clic de droite suivi de la commande *Créer un raccourci*..))

- The `shell:startup` directory must be opened (by hitting the *Windows* and *R* keys together and typing
`shell:startup`).
.fr((- Le répertoire `shell:startup` est ouvert en tapant les touches *Windows* et *R* puis
en tapant `shell:startup`..))

- The shortcut must be moved from its directory to this startup directory.
.fr((- Le raccourci créé à l'étape précédente est déplacé vers le répertoire startup..))

- Windows must be restarted.
.fr((- Windows doit être redémarré..))

- From then on, the `mlmd` alias is available in any command line box as a normal command.
.fr((- A partir de ce moment, l'alias `mlmd` est disponible dans les invites de commande.))

- This method may work with earlier versions of Windows but they have not been tested.
.fr((- Cette méthode peut fonctionner avec des versions antérieures de Windows mais celles=ci
n'ont pas été testées..))

## How to Use MLMD.fr((Utilisation de MLMD.))

MLMD is run by the php interpreter and either receives parameters telling it which source
files to process, either processes all the source files it finds in the current directory
from where it has been launched.
.fr((MLMD est exécuté par l'interpréteur PHP et reçoit des paramètres qui lui indiquent
les fichiers à traiter ou explore le répertoire actuel et ses sous-répertoires pour localiser
les fichiers à traiter..))

Optional parameters tells mlmd where to write generated files, how to number headings or write links.
.fr((D'autres paramètres indiquent à MLMD où placer les fichiers générés, comment numéroter les titres
ou écrire les liens..))

### MLMD run parameters.fr((Paramètres d'exécution MLMD.))

The syntax for `mlmd.php` and its arguments is:
.fr((La syntaxe pour `mlmd.php` et ses paramètres est la suivante :.))

.((
```code
php <path-to-mlmd>mlmd.php [parameters]
parameters:
    [-i <file_path> [...]]
    [-main <file_path>]
    [-out html|htmlold|md|mdpure]
    [-numbering <numbering_scheme>]
    [-od <path>]
```
.)).fr((
```code
php <chemin-de-mlmd>mlmd.php [paramètres]
paramètres :
    [-i <chemin_fichier> [...]]
    [-main <chemin_fichier>]
    [-out html|htmlold|md|mdpure]
    [-numbering <schéma_numérotation>]
    [-od <chemin>]
```
.))

If an alias has been set there's no need to explicitely call `php` or give the full path of MLMD script.
.fr((Si un alias a été créé, il est inutile d'appeler explicitement l'interpréteur php ou de donner
le chemin complet du script MLMD..))

The input files can be given to the script with the `-i` parameter, or they can be found in
the current directory from where the script is called if no `-i` parameter is given. This is explained
in [Input files](#input-files--i-argument).
.fr((Les fichiers sources peuvent être spécifiés avec le paramètre `-i`, ou bien être trouvés
automatiquement par le script si aucun `-i` n'est spécifié. Cela est décrit dans
[Fichiers sources](#fichiers-sources-parametre--i).))

### Source file pathes and names.fr((Chemin des fichiers sources.))

The files names for the MLMD source files must end with either `.base.md` or `.mlmd` extension. Files with
other extensions will be ignored. The `.base.md` extension can be convenient because syntax highlighting
and Markdown previewing will work in most editors, however the MLMD sources are not actual Markdown files
and do not fully conform to Markdown syntax so this can lead to some confusion. The `.mlmd` extension is
more explicit and makes it clear that the files are MLMD sources rather than variants of Markdown files,
and text editors can generally be configured to recognized MLMD syntax.
.fr((.Le noms des fichiers sources MLMD doivent posséder l'extension `.base.md`ou `.mlmd`. Les fichiers
avec une extension différente seront ignorés par MLMD. L'extension `.base.md` peut être pratique car la
coloration syntaxique Markdown fonctionnera dans la plupart des éditeurs de texte pour la majorité des
fichiers, toutefois les fichiers sources MLMD ne sont pas réellement des fichiers Markdown, ce qui peut
mener à une certaine confusion lors de l'édition. L'extension `.mlmd` est plus explicite et montre clairement
que les fichiers sont à destination de MLMD, et les éditeurs de texte peuvent généralement être paramétrés
pour reconnaitre la syntaxe MLMD..))

When no source files parameter (`-i`) is given to the script, MLMD will explore the directory tree where
it starts and generate files for all the sources it finds and the languages declared in them. The generated
files will be put in the same directory as their source file.
.fr((Lorsqu'aucun paramètre `-i` n'est fourni, MLMD explore le répertoire de départ et génère des fichiers
pour chacun des fichiers `.mlmd` ou `.base.md` qu'il y trouvera, en respectant la même hiérarchie de répertoires..))

The `-main` parameter sets the main input file and the root directory for all relative links in the
generated files: the directory of this main file will be considered as the root directory for all other files.
For consistency, no other file should lie above this root directory or in a directory outside the tree under
this root, so that all internal links in generated files can use relative pathes.
.fr((Le paramètre `-main` indique le fichier principal et le répertoire racine pour tous les liens relatifs
qui seront placés dans les fichiers générés. Le répertoire de ce fichier est considéré comme la racine de
la hiérarchie de l'ensemble des fichiers. Aucun fichier situé au dessus de ce répertoire ou dans une autre
branche ne sera retenu, et tous les liens et noms de fichiers ou de répertoires seront relatifs à cette racine..))

The various directives are described in.fr((Les différentes directives sont décrites dans la
partie.)) [Directives](#directives).

### Input files: `-i` argument.fr((Fichiers sources : paramètre `-i`.))

To process specific files, use the `-i` parameter followed by the files pathes. To process more than one files,
it is best to have them in a same tree and to start MLMD at the root directory where the main Markdown file lies so
MLMD will find all the source files. In this case the `-i` argument is not needed.
.fr((Pour traiter des fichiers spécifiques, on utilise le paramètre `-i` suivi d'un chemin de fichier. Pour traiter
plusieurs fichiers il est préférable de les placer dans un arbre de sous-répertoires et de démarrer MLMD à partir de la racine
de cet arbre de répertoires afin qu'il trouve de lui-même tous les fichiers sources. le paramètre `-i` est alors inutile.))

- Process a given file: use `-i <template_path>`:
.fr((- Traiter un fichier donné : `-i <chemin>` :.))

  ```code
  php ~/phpscripts/mlmd.php -i ~/project/README.mlmd
  ```

- Process multiple files: use multiples `-i <template_path>`:
.fr((- Traiter plusieurs fichiers : utiliser plusieurs `-i` :.))

  ```code
  php ~/phpscripts/mlmd.php -i ~/project/README.mlmd -i ~/project/HOWTOUSE.mlmd
  ```

- Process a whole directory and subdirectories: change to this directory and don't give any `-i` parameter:
.fr((- Traiter un répertoire et ses sous-répertoires : se placer dans ce répertoire et ne pas donner de paramètre `-i`:.))

  ```code
  cd ~/project
  php ~/phpscripts/mlmd.php
  ```

  This syntax will process any file found in the directory tree which ends by `.base.md` or `.mlmd`,
  including those found in sub directories. Other files will be ignored.
.fr((  Cette syntaxe traite tous les fichiers d'extension `.mlmd` ou `.base.md` trouvés dans le répertoire
  et ses sous-répertoires. Les autres fichiers sont ignorés..))

### Main file: `-main` argument.fr((Fichier principal : paramètre `-main`.))

If a file is named `README.mlmd` in the directory where the script is started, it will be considered
the main file of all the directory tree and all the links will use pathes relative to its directory.
Notice the name casing: `README` is uppercase, while the `.mlmd` extension is lowercase. On Windows,
case is not significant but the script still searches an uppercase `README`.
.fr((Si un fichier se nomme `README.mlmd`dans le répertoire de démarrage de MLMD, il est considéré
comme le fichier principal et les chemins et liens générés seront relatifs à l'emplacement de ce
fichier. Attention à la casse du nom : `README` est en majuscules tandis que `.mlmd` est en minuscules.
Sur Windows les majuscules ne sont pas significatives mais MLMD cherchera tout de même `README`
en majuscules..))

If there is no `README.md` file in the starting directory, the `-main` parameter can be used to tell
the script which source is the main file, and indirectly which directory is the root directory:
.fr((S'il n'y a aucun fichier `README.mlmd` dans le répertoire de démarrage, le paramètre `-main`
peut être utilisé pour indiquer le fichier source principal et, indirectement, le répertoire racine
de tous les liens relatifs :.))

```code
php ~/phpscripts/mlmd.php -main ./main.mlmd
```

The main file is generally the bets place where to put a global table of contents covering
all the sorce files. See the `.toc` directive for more informations.
.fr((Le fichier principal est en général l'endroit le plus approprié pour insérer un sommaire
global qui couvre tous les fichiers. Voir la directive `.toc` pour plus de détails..))

### Output mode html/htmlold/md/mdpure: `-out` argument.fr((Mode de sortie html/htmlolf/md/mdpure : paramètre `-out`.))

The `-out` parameter selects the HTML or Markdown syntax for the links in the Tables Of Contents.
.fr((Le paramètre `-out` choisit la syntaxe HTML ou Markdown pour les liens
générés dans les sommaires..))

Markdown allows a few ways for creating links to a heading in a file:
.fr((Dans les fichiers Markdown on dispose de plusieurs syntaxes pour créer un lien vers un titre :.))

.((
- use standard HTML `<A>` anchors and links, using the `name` or `id` attribute to identify anchors.
- use Markdown automatic heading targets, all lowercase with non alphanumeric characters deleted and spaces
  changed to dashes.
- use Markdown `{:` targets in headings: this style is not recognized by all Markdown editors and
  viewers and may not work very well.
.)).fr((
- utiliser des ancres et des liens HTML standards avec la balise `<A>`, en utilisant un attribut `id`
  ou `name` pour identifier les ancres.
- utiliser des cibles automatiques Markdown vers les titres, passés en minuscules, débarrassés
  des caractères non alphanumériques et où les espaces sont remplacés par des traits d'union.
- utiliser des cibles `{:` dans les titres : ce style n'est pas reconnu par tous les éditeurs
  et visualisateurs Markdown et peut ne pas fonctionner très bien.
.))

The standard old style HTML `<A name="target"></A>` or modern style HTML `<A id="target"></A>` anchors
and `<A href="file#target"></A>` links can be used in MLMD sources just like they would in standard HTML
or Markdown. The Markdown automatic links `[](#heading-text)` also works as they would in a normal
Markdown: MLMD won't change the anchors and links written using these forms. However this needs a change
in titles text in the automatic link as they must be cleaned from any space or non alphabnumeric characters.
.fr((Le style d'ancres HTML le plus ancien `<A name="ancre"></A>` ou le plus moderne `<A id="ancre"></A>` ainsi
que les liens HTML `<A href="fichier#ancre"></A>` peuvent être utilisés dans les sources MLMD et fonctionneront
comme dans n'importe quel fichier Markdown ou HTML. Les liens Markdown automatiques `[](#titre)` fonctionnent
également comme dans les fichiers Markdown normaux : MLMD ne modifiera pas ces ancres et liens lors de la
génération. Toutefois ces liens demandent une modificagtion du texte du titre qui doit être débarrassé des
espaces et des caractères non alphanumériques..))

Common use standards for Markdown discourage the use of HTML, however it is perfectly valid to use HTML and
HTML anchors are more versatile and reliable than Markdown links which are not always correctly handled by
Markdown files viewers or editors.
.fr((Par convention on évite généralement d'utiliser du HTML directement dans des fichiers Markdown afin de
permettre la génération vers d'autres formats, toutefois ce n'est pas interdit et les liens HTML sont plus fiables
que les liens Markdown, ces derniers n'étant pas toujours bien reconnus ou gérés par les logiciels d'affichage
ou d'édition Markdown.))

That said, MLMD can generate a Table Of Contents using the `.toc` directive and will put links to headings
in this table. To help with adopted conventions, MLMD allow the choice for anchors and links styles it places in the
table of contents links and in file headings. This is done using the `-out` parameter.
.fr((Ceci étant, MLMD peut générer un sommaire avec la directive `.toc` et va y insérer des liens vers les
titres des fichiers placés dans le sommaire. Pour respecter les conventions choisies, MLMD propose le choix entre
différents styles de liens et d'ancres dans les sommaires et les titres, à l'aide du paramètre `-out`..))

| Parameter        | Headings anchors      | TOC links                  |
.fr((| Paramètre      | Ancre des titres      | Liens sommaire             |.))
|---------------------|-----------------------|----------------------------|
| `-out htmlold`      | `<A name="target">`   | `<A href="file#target">`   |
| `-out html`         | `<A id="target">`     | `<A href="file#target">`   |
| `-out md`           | `<A id="target">`     | `[](file#target)`          |
| `-out mdpure`       | `{#id}`               | `[](file#target)`          |

All the generated identifiers in anchors are guaranteed globally unique over the processed files by MLMD.
.fr((MLMD affecte un identifiant globalement unique à chaque titre de chaque fichiers..))

There is no absolute best method, the choice for the right method is context dependent. To try
another mode it is best to run MLMD on source files changing only the `-out`parameter value and check
if the result is as expected..))
.fr((Il n'y a pas de meilleure méthode, chacune est appropriée à un contexte. Pour essayer un mode il
suffit de passer MLMD sur les fichiers en changeant le paramètre `-out` et de vérifier si le résultat
correspond à ce qui était attendu..))

#### Named HTML anchors: `htmlold`.fr((Ancres HTML nommées : `htmlold`.))

This mode uses plain old HTML style `<a name="id">` anchors to headings targets and `<a href>` links
in the TOC. It is best used in vanilia HTML context for existing documentation or system, to keep maximum
compatibility with possibly old Web browsers.
.fr((Ce mode utilise des ancres de style ancien `<a name="id">` et des liens classiques `<a href>`. Il est
très approprié dans un contexte HTML standard, pour une documentation ou un système existants afin de maintenir
une excellente compatibilité..))

#### Identified HTML anchors: `html`.fr((Ancres HTML identifiées : `html`.))

Recent standards have replaced the `name` attribute in HTML `<A>` anchors by the `id` attribute,
which has the benefit of automatic interfacing with Javascript. This mode uses the new `id` attribute
for anchors and `<a href>` links in the TOC and is well suited for HTML documentation in a modern,
dynamic scripted environment.
.fr((Les standrads récents ont remplacé l'attribut `name` des ancres HTML `<A>` par l'attribut ìd`,
qui a l'avantage d'être automatiquement connu de Javascript. Dans ce mode, MLMD utilise `id` dans les
ancres. Il est particulièrement adapté pour une documentation HTML dans un environnement moderne
dynamique ou scripté..))

#### Anchored Markdown: `md`.fr((Ancres Markdown : `md`.))

This hybrid mode uses HTML anchors with the `id` attribute and `[]()` Markdown links in the TOC.
It is appropriate for software or Github documentation and works in a lot of different situations
where HTML is allowed.
.fr((Ce mode hybride utilise des ancres HTML avec un attribut `id` mais des liens Markdown `[]()`
dans le sommaire. Il est approprié aux documentations Github ou de logiciel et fonctionne
parfaitement dans différentes situations où le HTML est autorisé..))

#### Pure Markdown: `mdpure`.fr((Markdown pur : `mdpure`.))

This mode generate Markdown `{#}` anchors for headings and uses `[]()` Markdown links in the TOC
and use no HTML construction at all. It is well suited in pure Markdown contexts or when files are
automatically checked against Markdown conformity. However Markdown anchors may not work in all
Markdown processors so if this is a problem, the `md` hybrid mode can be a better choice.
.fr((Ce mode génère des ancres Markdown `{#}` dans les titres et des liens Markdown `[]()` dans
les sommaires et n'emploie aucune construction HTML. Il est très adapté aux contextes Markdown purs
ou lorsque la conformité des fichiers aux standards Markdown est vérifiée automatiquement. Toutefois
les ancres Markdown ne fonctionnent pas dans tous les processeurs Markdown (éditeurs ou browsers).
En cas de problème, le mode hybride `md` peut se révéler un meilleur choix..))

#### About non-unique headings.fr((A propos des titres non uniques.))

Because of the automatic headings links feature, Markdown convention is generally forbidding identical
heading texts in a file. However, except for a warning from Markdown lint tools, identical headings are
not an actual issue for MLMD if they are not targeted by any automatic link. MLMD allocates unique anchor
identifiers over all the processed files so even identical headings can be targeted unambigously in the TOC.
However the user cannot know the MLMD unique identifier before all files are processed, so links in the text
body cannot easily use the MLMD anchors.
.fr((En raison des liens automatiques vers les titres, par convention les fichiers Markdown ne doivent
généralement pas utiliser un même texte de titre plusieurs fois. Toutefois, excepté un warning des outils
de vérification Markdown (linting) de tels titres ne posent pas de réel problèmes à MLMD s'ils ne sont pas
explicitement visés par des liens automatiques Markdown. Pour ses propres liens de sommaire, MLMD alloue
un identifiant et une ancre unique à chacun des titres présents dans l'ensemble des fichiers sources
même si certains sont identiques. Ces identifiants ne sont toutefois pas connus avant la génération, aussi
le rédacteur ne peut pas les utiliser dans les fichiers sources de façon simple.

To solve this and use the unique MLMD headings anchors, the best way is to use explicit anchors in the
identical headings so they can be referenced in manual links in the source files. Either Markdown or HTML syntax
can be used. MLMD will forward these anchors and links into the generated files and won't mess with them, provided
they don't use the `a<integer>` format used by MLMD. (E.g. `a12`.). MLMD will add its own anchors and links which
won't interfere with the text body anchors and links.
.fr((Pour répondre au besoin d'ancre unique dans des titres identiques, le meilleur moyen est d'utiliser des
ancres explicites dans ces titres afin de pouvoir les référencer dans des liens dans le corps du texte des
fichiers sources. Les syntaxes HTML ou MD peuvent être utilisées, MLMD reproduira simplement ces ancres et liens
dans les fichiers générés sans interférer avec ses propres ancres et liens de titres, à condition que les ancres
explicites n'utilisent pas le format `a<nombre>` de MLMD.))

Another solution is to process files once so each heading anchor can be checked in the generated files and
then used in the source files manual links, but this assume headings won't change in future source files
updates and is hazardous..))
.fr((Une autre solution est de générer les fichiers une première fois avec MLMD afin de révéler
les ancres uniques des titres dans les fichiers générés pour pouvoir les référencer dans les liens des
fichiers sources. Toutefois ceci suppose que les titres ne changeront pas lors de futures mises à jour
des documents sources et est déconseillé..))

### Headings numbering: `-numbering`.fr((Numérotation des titres : `-numbering`.))

The `-numbering` parameter sets a numbering scheme for headings levels over all the generated files and in the
tables of contents. For example, a third level heading could be numbered `A.2-5) Using objects`. The numbering
can be set in two ways:
.fr((Le paramètre `-numbering` indique un schéma de numérotation pour les différents niveaux
de titres rencontrés dans tous les fichiers sources et dans les sommaires. Par exemple un titre de niveau
3 peut être numéroté `A.2-5) Utiliser les objets`. La numérotation peut être choisie de deux façons :.))

.((
- globally for all generated files, using the `-numbering` script argument
- file by file using the `.numbering` directive.
.)).fr((
- globalement pour tous les fichiers avec l'argument `-numbering`
- fichier par fichier avec la directive `.numbering` dans les fichiers sources
.))

The script argument has priority and will make MLMD ignore any file `.numbering` directive. The following
addresses the script argument, the syntax is identical for the file directive and is addressed later.
.fr((L'argument de la ligne de commande a priorité et supplantera les directives `.numbering``
dans les fichiers source. Ce qui suit traite de cet argument, la syntaxe de ses paramètres est identique
pour la directive qui sera abordée plus loin..))

#### Syntax.fr((Syntaxe.))

The parameter consists of any number of levels definitions separated by a comma:
.fr((Le paramètre contient un nombre quelconque de définitions de niveaux séparées par une virgule :.))

.((
```code
-numbering [<level>]:[<prefix>]:<symbol>[<separator>][,...]]
```
.)).fr((
```code
-numbering [<niveau>]:[<préfixe>]:<symbole>[<séparateur>][,...]]
```
.))

Following are details about each definition part.
.fr((Voici une description des parties de la définition de niveau.))

- `<level>` is optional and is a digit between `1` and `9` representing the heading level (which is the number of '#' at
the heading beginning). By default, this defines the next level, starting with 1 and incrementing at each definition.
- `:` is a mandatory separator between parts of the definition, even for the empty ones.
- `prefix` is an optional prefix for the level numbering, e.g. '`Chapter `'. The prefix only appears in the level numbering
for the heading of this level, and will be omitted from inferior levels numbering.
- `<symbol>` is a mandatory symbol which can be an uppercase letter `A` to `Z`, a lowercase letter from `a` to `z`,
a digit from `1` to `9` or the spcial notation '&I' or '&i' for uppercase or lowercase Roman numbers. It sets the starting
value for the level numbering, except for Roman numbers which always start at `I`.
- `separator` is an optional symbol which will be concatenated to the numbering symbol before the next level numbering.
Conventional symbols can be `.`, `-`or `)`. Omitting this separator for the last level is identical to using `.`.
- `,` is a separator before the next level definition.
.fr((
- `<niveau>` est un chiffre entre `1` and `9` facultatif qui indique le ,niveau de titre concerné (c'est le nombre de `#`
qui débute le titre). Par défaut c'est le niveau suivant celui de la définition précédente, en commençant par 1.
- `:` est un séparateur obligatoire entre chacune des parties de la définition, même pour les parties omises.
- `préfixe` est un préfixe facultatif pour le tout premier niveau de titre, par exemple `Chapitre `. Le préfixe n'apparait
que dans le libellé des titres de premier niveau, même s'il est spécifié pour un autre niveau.
- `<symbole>` est un syùbole obligatoire qui peut être une lettre majuscule `A` à `Z`, une lettre minuscule `a` à `z`,
un chiffre de `1` à `9` ou la mention spéciale `&I` ou `&i` pour représenter les chiffres romains en majuscules
ou minuscules. Ce symbole indique la valeur de départ pour la numérotation du niveau, sauf pour les chiffres romains
qui commencent toujours à `I` ou `i`.
- `séparateur` est un caractère facultatif qui sera écrit après les symboles de numérotation de ce niveau. Les symboles
séparateurs les plus courants sont `.`, `-` ou `)`. Par défaut les niveaux de la numérotation sont séparés par un `.`.
- `,` sépare les différentes définitions de niveau.
.))

A level N always starts with the defined symbol, then all the following headings at the same level N will increment
this symbol until a heading with a level N-1 above will reset the current level N, and continue with the next number
in the setting for the above level N.
.fr((Le premier titre d'un niveau N est numéroté avec le symbole indiqué, les suivants au même niveau N seront ensuite
incrémentés jusqu'à ce que survienne un titre de niveau supérieur N-1 qui réinitialisera la prochaine séquence de
niveau N au symbole de départ..))

#### Example.fr((Exemple.))

This is how to number level 1 headings with the 'A', 'B' etc letters followed by a dash `-`,
then add a number followed by a dot `.` for level 2 headings, then add a number for
level 3 headings:
.fr((Voici comment numéroter les titres de niveau 1 avec les lettres 'A', 'B' etc, suivies
d'un tiret '-' puis d'un nombre suivi d'un point pour les titres de niveau 2 et d'un nombre
pour les ittres de niveau 3 :.))

.((
```code
-numbering 1:Chapter :A-,2::1.,3::1
```
.)).fr((
```code
-numbering 1:Chaptitre :A-,2::1.,3::1
```
.))

- Levels 4 and above headings will not be numbered and will not appear
  in table of Contents if the .toc directive doesn't ask for them. If
  they apear in TOC, they will use a dash '`-`' as prefix.
.fr((
- Les titres de niveau supérieur à 4 ne seront pas numérotés et n'apparaitront
  pas dans les sommaires si la directive .toc ne les mentionne pas. S'ils
  apparaissent dans la directive, ils seront préfixés par un tiret `-`.
.))
- The first level 1 heading will be prefixed and appear as `Chapter A)`.
.fr((- Le titre de niveau 1 sera préfixé et apparaitra comme `Chapitre A)`..))
- Level 2 headings will be numbered `A-1)`, `A-2)` etc. The level 1 prefix
  doesn't apply to level 2 numbering.
.fr((- Les titres de niveau 2 seront numérotés `A-1)`, `A-2)` etc. Le préfixe
  du niveau 1 ne s'applique pas à partir du 2.))
- Level 3 headings will be numbered `A-1.1`, then `A-1.2`, `A-1.3` etc.
.fr((- Les titres de niveau 3 seront numérotés `A-1.1` puis `A-1.2`, `A-1.3` etc.))

Notice that only the level 1 can use a prefix. Although prefixes can be supplied
for other levels in the numbering scheme, they will not be used and have no effect.
.fr((Seul le niveau 1 peut bénéficier d'un préfixe. Bien que l'on puisse indiquer
des préfixes d'autres niveau dans le schéma de numérotation, ils ne seront pas
utilisés et n'auront aucun effet..))

## Writing source files.fr((Rédaction des fichiers sources.))

The file sources must be named with a `.base.md` or `.mlmd` extension. They are UTF-8
text files with Linux/macOS or Windows end of lines. MLMD is UTF-8 compliant so macOS
and Windows encoding could have side effect, as any character between codes 128 and 255
would be invalid UTF-8. The source files must use UTF-8 for any characters other than ASCII.
.fr((
Les fichiers source doivent posséder une extension `.base.md` ou `.mlmd`. Leur contenu
est du texte encodé en UTF-8 avec des fins de ligne Windows ou Linux/macOS. MLMD est
conforme à UTF-8, aussi un encodage Windows ou macOS aurait des effets erratiques, les 
codes de caractère entre 128 et 255 étant invalides en UTF-8. Les fichiers source doivent
impérativeent utiliser l'encodage UTF-8 pour tout caractère hors de l'ASCII (codes 0 à 127).
.))

The user has total control over which languages he/she wants to put in the sources.
Each language must be declared with one user choosen code. Using ISO standard codes
like `en-US` or `fr-FR` allow to easily link standard Web APIs for nation flags or
other international content, but more simple codes like `en` or `fr` are faster and
easier to write and can be associated to an optional ISO code. Both the language code and
the associated ISO code can be referenced in source text using variables which are
addressed later in this documentation. Look for `ISO 639` standard on the Web to find out
which code would be appropriate for your needs, as multiple standard versions exist.
.fr((
L'utilisateur controle les langages qu'il souhaite utiliser dans les fichiers source.
Chaque langage est déclaré avec un code choisi par l'utilisateur. L'utilisation de
codes ISO standards comme `en-US` ou `fr-FR` facilite la rédaction de liens avec des API
Web pour les nations, les drapeaux et d'autres contenus internationaux mais des codes
plus simples comme `en` ou `fr` sont plus faciles et rapides à rédiger et peuvent être
associés à un code ISO. Le code du langage et le code ISO peuvent tous deux être référencés
dans le texte source à l'aide de variables détaillées plus loin dans ce document. Cherchez
`ISO 639` sur le Web pour savoir quels codes seraient appropriés selon vos besoins, car
il existe plusieurs versions du standard.
.))

See [`.language` directive](#declaring-languages-languages-directive) for the syntax
of languages declaration.
.fr((Voir [Directive `.language`]())) pour la syntaxe de la déclaration des langues..))

### Source beginning.fr((Début de fichier source.))

MLMD will not output anything into any file until it first meet a `.languages` directives
setting the output language codes. This is a restriction over all the input files present
in the input root directory and in subdirectories. The best practice is to put the `.languages`
directive in the first lines of the main input file. If the `.languages` directive appears
late in its file, any text before it will be ignored so if the output files look strange
and miss large parts fo text, the first thing to check is the `.languages` directive position.
.fr((
MLMD ne génère aucun texte dans aucun fichier tant qu'il n'a pas rencontré au moins une directive
`.languages` déclarant les codes de langue utilisés. C'est une contrainte globale à l'ensemble
des fichiers passés en paramètre ou présents dans le répertoire du fichier principal et
ses sous-répertoires. Une bonne pratique est de placer la directive `.languages` au début du
fichier principal. Si la directive survient loin dans un fichier, tout ce qui la précède
est ignoré, aussi lorsque les fichiers générés paraissent étranges ou s'il manque une grosse
partie de texte, la première chose à vérifier est l'emplacement de la directive `.languages`.
.))

A best practice can be to put the same `.languages` directive at the start of all source files
so there is no ambiguous interpretation but it's not mandatory.
.fr((Pour éviter les ambiguités on peut placer la même directive `.languages` au début de chacun
des fichiers sources traités mais ce n'est pas obligatoire.))

- Any text before the `.languages` directive is ignored and not sent to any output file.
.fr((- Tout texte précédant la première directive `.languages` est ignoré et ne sera générés
  dans aucun fichier..))
- The `.languages` directive must be written at the beginning of a separate line with no 
  other content than its own parameters.
.fr((- La directive `.languages` doit être placée au début d'une ligne isolée sans aucun
  autre contenu que ses propres paramètres..))
- Having some content before the heading level 1 is not conforming to Markdown conventions,
  but MLMD will write any text before the heading level 1 into all generated files, provided
  it appears after the .languages directive.
.fr((- Les conventions Markdown interdisent tout contenu avant le titre de niveau 1 qui est
  considéré comme le titre du fichier, mais MLMD ignore cela et génère tout texte précédant
  le premier titre, à condition qu'il se situe après la première directive `.languages`..))
- The optional `.numbering` and `.topnumber` directives can be placed between the `.languages`
  and the level 1 `#` heading. The `.numbering` is ignored if a `-numbering` parameter is
  given to the command line.
.fr((- Les directives facultatives `.numbering` et `.topnumber` peuvent se situer entre
  la directive `.languages` et le titre de niveau 1 `#`. Le `.numbering` sera ignoré si
  un paramètre `-numbering` a été fourni à la ligne de commande..))

### Headings.fr((Titres.))

MLMD requires `#` prefixed headings and doesn't recognize the alternate syntax for
level 1 and 2 headings, which is available by adding `==` or `--` on the line
following the heading. The `==`and `--` lines can be used but will not be sufficient
for a heading to be recognized by MLMD.
.fr((MLMD reconnait les symboles `#` en début de ligne comme préfixe indiquant
un niveau de titre. Il ne reconnait pas les syntaxes alternatives des niveaux 1 et 2
accessibles en soulignant les titres avec `==` ou `--` sur la ligne suivante. Ces
syntaxes peuvent être utilisées afin d'apparaitre dans les fichiers Markdown générés
mais elles ne suffiront pas pour que MLMD reconnaisse les titres et les inclue dans
le schéma de numérotation ou les sommaires..))

.((
```code
# This heading will be found by MLMD

This one won't be found because it doesn't have a # prefix
==========================================================

## This one will be found by its ## prefix
------------------------------------------
```
.)).fr((
```code
# Ce titre sera reconnu par MLMD

Celui-ci sera pas reconnu car il ne possède pas de préfixe #
============================================================

## Celui-ci sera reconnu grâce à son préfixe ##
-----------------------------------------------
```
.))

The `#` prefix must be followed by at least one space. Closing `#` have no particular effect.
Markdown conventions allow an empty line after a heading, MLMD doesn't change this but allow
more than one empty line, although it will only generate one in final Markdowns.
.fr((Les préfixes `#` doivent être suivis d'au moins un espace, les éventuels suffixes `#`
n'ont pas d'effet particulier..)) Par convention dans un fichier Markdown on peut faire suivre
les titres d'une ligne vide, MLMD accepte même plusieurs lignes vides mais n'en écrira qu'une
dans les fichiers générés.

### End-of-Lines and End-of-Paragraphs.fr((Fin de ligne et fin de paragraphe.))

By default, except for headings and one-line directives, MLMD sources paragraphs are recognized
by MLMD as default text paragraphs which goes in all the language specific generated files except
those with corresponding language-specific parts. End of lines will be reproduced in generated
files, and empty lines will also make their way to generated files.
.fr((Par défaut, en dehors des t!itres et des directives spéciales qui occupent une ligne,
MLMD interprète les paragraphes des fichiers sources comme du texte par défaut qui va dans tous
les fichiers générés pour chaque langage sauf ceux qui ont une section spécifique. Les fins
de ligne et les lignes vides seront reproduites dans lers fichiers générés..))

A language specific section can follow a corresponding default text paragraph if it is separated
by not more than one end of line, meaning it can follow the default text on the same line or 
starting on the next line. In that special case, the end of line separating default text from the
language start marker will be ignored by MLMD. This feature alllows a clean separation of default
text paragraphs and language specific matching paragraphs. In practice, MLMD ignores a single end
of line when it only separates two languages parts. Doubled end of lines are always considered
as text for the current language and will appear as such in generated files. This allow a clean
organisation of translated text while conforming to Markdown.
.fr((Une section de texte propre à un langage peut directement suivre le texte par défaut soit sur la
même ligne, soit sur la ligne suivante. Dans ce cas particulier, la fin de ligne est ignorée
par MLMD. Cette particularité permet de séparer proprement les paragraphes de texte par défaut
et ceux des autres langues. En pratique, MLMD ignore les fins de ligne uniques quand elles séparent
juste une partie d'une langue d'une autre. Les fins de ligne doublées sont considérées comme
appartenant au texte pour la langue en cours et seront écrites dans les fichiers générés. Ceci
permet une une organisation plus claire du texte tout en respectant Markdown..))

Notice: the `.language((` and `.))` markers for language parts used in following examples will be
detailed later, they start or end a language specific part.
.fr((Note : les marqueurs `.langue((` et `.))` dans les exemples et le texte suivant seront détaillés
plus loin, ils ouvrent ou ferment une partie propre à une langue..))

.((
```code
This will be default text going in all languages files by default.
.fr((This will only go in french language file, which will not feature previous default text..))

This will be default text for all files except french file..fr((This will go into the french
file in place of previous default text..))
```
.)).fr((
```code
Ceci est du texte par défaut qui ira dans tous les fichiers sauf le français.
.fr((Ceci est du texte qui ira dans le fichier français à la place du texte précédent..))

Ce texte ira dans tous les fichiers sauf le français..fr((Ce texte ira dans le
fichier français à la place du précédent..))
```
.))

Normal Markdown conventions generally assume that text lines should not be larger than about
80 characters but MLMD sources do not enforce this limit. All text for all languages of a given
paragraph can be typed on a single line or not, and use any line length.
.fr((Par convention Markdown recommande de ne pas dépasser environ 80 caractères par ligne
toutefois MLMD n'impose pas cette contrainte. Tout le texte de toutes les langues peut
être saisis sur une seule ligne ou plusieurs et n'importe quelle largeur de ligne convient..))

Here is an example:.fr((Voici un autre exemple :.))

```code
.((default text.))
.fr((texte français.))
.en((english text.))

Some other text....fr((Autre texte....))
```

MLMD interprets the three lines block this way:
.fr((MLMD interprète le bloc de trois lignes de cette façon :.))

1. The block starts line 1 by setting default text which will go in all generated file except those
   for which a language specific section is found.
.fr((1. Le bloc commence sur la première ligne avec du texte par défaut qui ira dans 
   les fichiers de toutes les langues sauf celles possédant du texte spécifique.))
2. The end-of-line at line 1 is ignored because it is immediately followed by another directive.
.fr((2. La fin de ligne de la première ligne est ignorée car elle est immédiatement
   suivie d'une directive de langue.))
3. Line 2 will put text only in the FR file, which will ignore the default text.
.fr((3. La deuxième ligne placera le texte dans le fichier de la langue française, qui
   ignorera alors le texte par défaut de la première ligne..))
4. The end-of-line at line 2 is ignored because it is immediately followed by another directive.
.fr((4. La fin de ligne de la deuxième ligne est ignorée car suivie d'une ouverture de langue.))
5. Line 3 will put text only in the EN file, which will ignore the default text.
.fr((5. La troisième ligne place le texte dans le fichier de la langue anglaise, qui ignorera
le texte par défaut..))
6. The double end-of-line after line 3 ends the paragraph and generates text in relevant files.
.fr((6. La double fin de ligne après la troisème ligne termine le paragraphe et la section de
texte multilingue qui précède, retournant en mode texte par défaut.))

Because end-of-lines are ignored when they only separate directives, the following line is
identical to the previous example and both will generate the same text in the same files:
.fr((Etant donné que les fins de ligne entre sections de langue sont ignorées, la ligne suivante
est équivalente au bloc précédent et génèrera le même texte dans les mêmes fichiers :.))

```code
.((default text.)).fr((french text.)).en((english text.))

Some other text....fr((Autre texte....))
```

As this last example shows, both styles can be choosen for source files writing with an
identical effect. Generaly, large sections of text for each language can be kept as paragraphs
separated by single ends of line while little text parts can be kept on a same line block.
.fr((Comme l'illustre ce dernier exemple, les deux styles peuvent être employés dans les fichiers
sources avec un effet identique. En général, les parties importantes de texte de chaque langage
peuvent être plavcées dans des paragraphes séparés par une simple fin de ligne, tandis que les
petites parties de texte pourront être rédigées dans les lignes d'un même bloc..))

#### Notes

Although Markdown syntax limits lines to little more than 80 characters, Markdown viewers and
Web Browsers generally do not bother about this limit and will display the text correctly. Similarly,
modern text editors will make the text fit into the displayed width even if there is no end of line.
Most often they feature a 'soft-wrapping' setting or viewing option in menus to put artificial
end-of-lines which aren't actually in the file. For example, this option is called *Toggle Word Wrap* in
Visual Code and is accessible ![in the *View* menu:](Images/word_wrap_vscode.png).
.fr((Bien que la syntaxe Markdown impose une limite de ligne à 80 caractères, les visualisateurs ou
éditeurs de fichiers Markdown ainsi que les browsers Internet ne se préoccupent pas de cette limite
et formattent le texte correctement. De même les éditeurs de texte modernes peuvent formater le texte
sur plusieurs ligne même en l'absence de fin de ligne. La plupart possèdent une commande de formatage
ou un paramètre pour cela dans les menus ou les dialogues de réglages afin d'insérer des fins de ligne
artificielles qui ne se trouvent pas réellement dans les fichiers. Par exemple, dans Visual Code cette
possibilité s'appelle 'soft-wrapping' et on l'active ![dans le menu *View* :](Images/word_wrap_vscode.png)..))

Although this is not mandatory, it is best to be consistent in the style of opening and closing
directives relatively to their text. A file should either use separate lines around the text for both
the opening and the closing directives, either put them on the same line around the text but avoid mixing
both techniques on large parts of text, or it would be unclear where the actual end of lines would be.
.fr((Bien que ce ne soit pas obligatoire, il est préférable de rester cohérent dans le style de rédaction
des paragraphes de texte pour chaque langue. Un fichier peut utiliser des lignes isolées pour l'ouverture
et la fermeture des parties de chaque langues ou les placer à l'intérieur des lignes mais on évitera
de mélanger les styles dans des parties importantes de texte, faute de quoi on ne distingue plus où
seront les vraies fins de ligne.))

- Separated lines:
.fr((*Lignes séparées :.))

  ```code
  .fr((
  Some french text.
  .))
  ```

- Same line:
.fr((Même ligne :.))

  ```code
  .fr((Some french text..))
  ```

### Escaping text.fr((Texte échappé.))

Directives and variables can be neutralized in a text section by surrounding it with the opening
escape `.{` and the closing escape `.}` directives. The directives won't have effect on generated files,
and variables and other directives will be copied as-is without expansion or interpretation.
.fr((Les directives et variables peuvent être neutralisées dans le texte en les entourant avec
le marqueur ouvrant `.{` et le marqueur fermant `.}`. Les directives n'auront aucun effet
sur les fichiers générés, et les variables et les directives seront écrites comme du simple texte
sans interprétation..))

Example:.fr((Exemple :.))

```code
The .{.)).} directive closes a language part.
```

In this exemple, the `.))` directive will be considered as simple text and not as a directive.

### Quoted text and code fences.fr((Texte en citation et barrières de code.))

MLMD roughly copies the parts of text which are surrounded by *back-ticks* (reversed quote),
*double quotes* and *code fences*. In these parts of text, MLMD doesn't interpret directives
and variables:
.fr((MLMD copie telles quelles les parties de texte entourées de guillemets et accent inversé
ainsi que les barrières de code Markdown. Dans ces parties de texte 'échapées', les variables et
directives n'auront pas d'effet et seront recopiées sans interprétation.))

- .{` ``` `.}: code fences surround code text in which directives and variables will not
  be interpreted.
.fr((- .{` ``` `.} : les barrières de code placées sur une ligne isolée entourent du texte
  où les variables et directives ne seront pas interprétées..))
- `"`: double quotes around text neutralize directives and variables, e.g. `".(("` will not close
  the current directive.
.fr((- `"` : les guillements autour du texte neutralisent les directives et variables, par exemple
`".))"` ne fermera pas le bloc de langue actuel..))
- .{`` ` ``.}: back-ticks around text also neutralize directives and variables, e.g. .{`.((`.}
  will not open default text part.
.fr((- .{`` ` ``.} : les accents inversés simpoles, doubles ou triples peuvent entourer du texte
échappé, par exemple .{`.((`.} ne commencera pas un bloc de texte par défaut..))

> Quoted and fenced text must be entirely put *inside* enclosing directives (default or language
  directives) as they cannot embed directives.
.fr((> Le texte échappé d'une langue doit intégralement se trouver à l'intérieur des marqueurs
  d'ouverture et fermeture de langue, puisque ces directives ne seront pas interprétées si
  elles se trouvent à l'intérieur du texte échappé..))
> Simple quotes `'` have *no neutralizing effect* and no specific surrounding function.
  MLMD has been designed this way because the simple quote character is used separately in a lot of
  languages for other uses than surrounding text.
.fr((> Les apostrophes `'` n'ont pas d'effet particulier. Ce choix a été fait dans MLMD parce que
  l'apostrophe est utilisé dans de nombreuses langues pour dans d'autres buts que pour entourer
  du texte..))
> Escaping back-ticks: to use actual back-ticks `` ` `` without the special effect, they can be
  embedded in doubled back-ticks with spaces
  (see [Markdown syntax about escapes](https://daringfireball.net/projects/markdown/syntax#autoescape))
  and this whole sequence sourrounded by MLMD escaping.
.fr((> Accents inversés : pour utiliser ce caractère sans générer l'effet d'échappement de texte
  ils peut être entouré de double-accent inversé et d'espaces (voir [la syntaxe Markdown pour 
  l'échappement](https://daringfireball.net/projects/markdown/syntax#autoescape) et la séquence
  complète peut être entourée des marqueurs MLmD `.{` et `.}`..))

### Variables

MLMD recognizes a few *variables*. These variables can be put anywhere in headings, links or text in the 
sources and will take a language specific value in the generated files.
.fr((MLMD connait quelques *variables*. Ces variables peuvent être placées n'importe où dans le texte,
les titres ou les liens dans les fichiers sources et prendront lors de la génération une valeur
correspondant à la langue ou au fichier généré.))

.((
| Variable    | Replaced by                                   | Example in generated file         |
|-------------|-----------------------------------------------|-----------------------------------|
| {file}      | Name of the currently generated file          | `file.en.md`              |
| {main}      | Name of main input file with no extension     | `README`                  |
| {extension} | Extension of the currently generated file     | `.en.md`                  |
| {language}  | Language code of the currently generated text | `en`                      |
| {iso}       | ISO code associated to language code          | `en_US`                   |
.)).fr((
| Variable    | Remplacé par                                   | Exemple dans les fichiers générés |
|-------------|------------------------------------------------|-----------------------------------|
| {file}      | Nom du fichier en cours de génération          | `file.fr.md`              |
| {main}      | Nom du fichier principal sans extension        | `README`                  |
| {extension} | Extension du fichier en cours de génération    | `.fr.md`                  |
| {language}  | Code de langue du texte en cours de génération | `fr`                      |
| {iso}       | Code ISO associé au code de langue en cours    | `fr_FR`                   |
.))

The `{main}` variable will be replaced by the generated main file path (from the `-main` script argument).
This allows to link to anchors in the main file, like a global table of content for example. All the
tables of contents generated by MLMD have an anchor named or identified as `toc`. The style of the anchor
depends on the output mode.
.fr((La variable `{main}` sera remplacée par le chemin du fichier principal tel que défini par le paramètre
`-main` de la ligne de commande. Ceci permet de placer des liens vers ce fichier, par exemple pour retourner
au sommaire général. Tout sommaire généré par une directive `.toc` possède une ancre nommée ou
identifiée `toc`. Le style de l'ancre dépend du mode de sortie..))

Each variable takes a value at generation time, except for `{main}` which is only converted to a value
if a `-main` argument has been passed to MLMD. If no `-main` file is defined, the text will stay as
`{main}` in the generated files.
.fr((Toutes les variables prennent une valeur lors de la génération des fichiers, sauf `{main}` qui est
ignorée si le paramètre `-main` n'a pas été spécifié dans la ligne de commande. Si le fichier principal
n'a pas été défini le texte reste `{main}` dans les fichiers générés..))

### Default text.fr((Texte par défaut.))

MLMD accepts default text in any part of the source: headings, table of contents title, normal text etc.
The default text is used by MLMD when no language directive has been used to specify the language specific
text.
.fr((MLMD accepte du texte par défaut à n'importe quel endroit des fichiers sources : dans les tires, les
liens, les tables des matières, les directives ou le corps de texte. Le texte par défaut est utilisé pour
toutes les langues qui n'ont pas de section de texte dédiée..))

When not bounded by opening and closing language directives, text is always considered as default text.
This feature is detailed in the directive `.default((` later.
.fr((En dehors des blocs délimités par les directives d'ouverture et de fermeture de langue, tout texte est
considéré comme du texte par défaut. Ceci est décrit dans la directive `.default((`..))

### Avoiding ambiguities.fr((Comment éviter les ambiguïtés.))

To avoid undesirable effects with end of lines, unordered or numbered lists and indented text,
a practical structure can be used for both the default text blocks and the language specific blocks.
First the default text opening directive is used on a single line, followed by default text, then a
new line closes default text and open a language section followed by the language specific text,
then a new line closes this section and the structure can be reproduced as many times as needed
for each language.
.fr((Pour éviter les effets indésirables liés aux fins de ligne ou aux listes numérotées ou non,
il y a une structure qui peut séparer dans ambiguité les blocs de texte par défaut ou spécifiques.
En premier lieu on place la directive pour ouvrir une section par défaut sur une ligne seule, suivie
du bloc de texte par défaut, puis sur une nouvelle ligne on ferme la section et on ouvre une nouvelle
pour une langue, suivie du texte pour cette langue, que l'on clot avec une nouvelle ligne. La structure
avec des directives d'ouverture et de fermeture sur des lignes isolées peut être répétée autant de fois
que nécessaire..))

As the following example shows, this structure is easy to read and avoid ambiguity.
.fr((L'exemple suivant montre que cette structure est très lisible et ne laisse planer
aucune incertitude..))

```code
.((
    - Here is some default text with special feature (idented list element)
.)).fr((
    - Voici du texte en français avec une particularité (élément de liste indenté)
.))
```

Although the default opening and closing directives are in fact optional, this structuration
with explicit directives on separate lines is an easy way to make sure the generated text
will be as expected.
.fr((Bien que les directives d'ouverture et fermeture pour le texte par défaut soient en réalité
facultatives, cette structuration avec des directives explicites sur des lignes séparées est un
moyen simple de s'assurer que le texte généré sera celui attendu..))

### Directives

Actions for generating the language specific files are set by *directives* in the sources. MLMD
directives always start with a dot `.` except fopr escape text markers - see previous details
about escaping text.
.fr((Les actions sur les fichiers et le texte générés pour chaque langue sont indiquées dans des
*directives*  placées dans les fichiers sources. Les directives MLMD commencent toujours par un
point `.`, excepté les marqueurs d'échappement de texte - voir les explications précédentes..))

Directives are of two types:
.fr((Les directives sont de deux sortes :.))

.((
1. Immediate Directives are followed by parameters and modify some of
   the MLMD settings or generate text.
2. Text Directives enclose text between an opening marker `((` and
   an ending marker `))` and apply some effect to it.
.)).fr((
1. Les directives immédiates sont suivies de paramètres et
   modifient certains réglages de MLMD ou génèrent du texte.
2. Les directives de texte commencent et se terminent par un 
   marqueur et entourent du texte source pour lui appliquer un effet.
.))

Here's a summary of the immediate directives:
.fr((Voici un résumé des directives immédiates :.))

.((
- `.languages` declares the language and iso codes available in source files
- `.numbering` sets the numbering scheme for the file headings and TOC
- `.topnumber` sets the number for the level 1 heading in numbering scheme for current file
- `.toc` generates a Table Of Contents in current file from all the choosen headings levels
  and the numbering scheme
.)).fr((
- `.languages` déclare les codes de langue et ISO disponibles dans les fichiers source
- `.numbering` programme le schéma de numérotation pour les titres et les sommaires
- `.topnumber` indique le numero du titre de niveau 1 du fichier dans le schéma de numérotation
- `.toc` génère un sommaire dans le fichier à partir des titres des niveaux indiqués
   et du schéma de numérotation
.))

Here's a summary of text open/close directives:
.fr((Voici un résumé des directives de texte :.))

- `.all((` starts a text section which will be put in all the language files
- `.default((` or `.((` starts a section which will be put in the language files for which no specific language section is available
- `.ignore((` or `.!((`  starts a text section which will not be put in any generated file.
- `.<code>((` starts a text section which will be put only in the generated file for language `<code>` which has been declared in the `.languages` directive.
- `.))` ends a section started by one of the `.((` directives and returns to the previous directive effect.
- `.{` starts an escaped text section (directives and variables are not interpreted or expanded)
- `.}` ends an escaped text section
.fr((
- `.all((` commence une section de texte qui ira dans les fichiers de toutes les langues
- `.default((` ou `.((` commence le texte par défaut qui ira dans les fichiers des langues n'ayant pas une section spécifique.
- `.ignore((` ou `.!((` commence une section de texte qui ne sera placé dans aucun fichier généré
- `.<code>((` commence une section de texte spécifique à une langue dont le code a été spécifié dans `.languages`
- `.))` termine une section de texte ouverte par une des directives `.((` et repasse à la langue précédente
- `.{` commence une section de texte échappé (pas d'interprétation des variables et directives)
- `.}` termine une section de texte échappé
.))

Directives are not case sensitive: `.fr((` is the same as `.FR((`. Notice that escape text markers 
work as opening and closing directives around escaped text, but as they directly derive from Markdown syntax
the markers will appear in the generated files, whereas MLMD directives won't.
.fr((Les directives ne sont pas sensibles aux minuscules et majuscules : `.fr((` est identique 
à `.FR((`. Il faut souligner que les marqueurs d'échappement de texte fonctionnent comme des directives
mais comme ils dérivent de la syntaxe Markdown ils seront présents dans les fichiers générés alors que
les directives MLMD ne le seront pas..))

### Immediate vs enclosed effect.fr((Effets immédiats et englobés.))

The `.languages`, `.numbering`, `.topnumber` and `.toc` directives have an *immediate effect*.
It implies they generally should be alone on an isolated line, and preferably at the beginning of
source files. (This is mandatory for `.languages`, because anything preceding it will be ignored by MLMD.)
.fr(( Les directives `.languages`, `.numbering`, `.topnumber` et `.toc` ont un effet *immédiat*. Cela
signifie qu'elles doivent généralement se situer sur une ligne isolée et de préference en début de
fichier source. Ceci est obligatoire pour `.languages`, car tout ce qui la précède est ignoré par MLMD.))

The other enclosing directives start with an opening `.<directive>((` marker which *encloses text* until a
matching `.))` is met, or until another `((` directive is opened.
.fr((Les autres directives englobantes commencent par une ouverture comme `.((`, suivie de texte et
ensuite d'une fermeture `.))` ou d'une autre directive d'ouverture..))

> Although this is not very useful, enclosing directives can be embedded: each `.<code>((` opening
will suspend any current opened directive effect, and the matching `.))` closing will resume it.
.fr((> Bien que ce ne soit pas ytrès utile, les directives englobantes peuvent être imbriquées : toute
directive ouvrante `.<code>((` suspend la directive englobante actuelle, et la directive fermante
`.))` la restaurera..))

### Default directives values and effects.fr((Valeurs et effets par défaut.))

Details will follow but it must be mentionned that the script has some defaults and that directives
themselves also have defaults settings.
.fr((Les directives seront détaillées par la suite mais il faut noter que les directives et les scripts
ont des paramètres et des réglages par défaut.))

- Anything preceeding the `.languages` directive is *ignored* and won't be written in generated files.
  See [Declaring languages](#declaring-languages-languages).
- Empty lines before the level 1 heading are ignored.
- After the `.languages` directive, MLMD acts as if a `.default((` directive had been met, so any
  text will go into all the languages files except language specific text even before the level 1 heading.
  Notice that text preceding level 1 heading is not Markdown compliant but MLMD will put it in files.
- The `.default((` or `.((` directive will only have effect on languages which do not have a defined
  content yet, any previous `.all` text will make `.default` useless. See []().
- The `.toc` directive has default values which generate an table of contents for local headings of
  levels 2 and 3 in the current file. See [TOC](#generating-table-of-content-toc).
- The table of contents generated in any file always has an implicit anchor named `toc` which can be
  used to link to it from any other file.
.fr((
- ce qui précède la directive `.languages` est ignoré et ne sera écrit dans aucun fichier généré
  Voir [Declarer les langues](#declaring-languages-languages)
- les lignes vides avant le titre de niveau 1 sont ignorées
- Après la directive `.languages`, MLMD agit comme si la directive `.default((` avait été trouvée
  et inscrira le texte dans tous les fichiers sauf ceux avec une section spécifique, même avant le titre
  de niveau 1. Il faut remarquer que Markdown interdit que du texte apparaisse avant le titre de niveau 1
  mais MLMD l'inscrira quand même dans les fichiers générés.
- La directive `.default((` ou `.((` termine toute précédente section de texte par défaut ou spécifique
  à une langue et démarre une nouvelle section de texte par défaut. Voir les détails dans [().]
- La directive `.toc` a des paramètres par défaut pour générer un sommaire local aux titres de niveaux 2 et 3
  du fichier en cours. Voir [TOC](#generating-table-of-content-toc).
- Tout sommaire généré par un fichier possède une ancre nommée ou identifiée `toc` dans le fichier en cours
  pour pouvoir la cibler dans un autre fichier..))

## Directives Reference.fr((Références des directives.))

In this part, each directive will be explained in detail with syntax, use notes
and examples.
.fr((Dans cette partie de la documentation sont décrites les directives avec
leur syntaxe, des notes d'utilisation et des exemples.))

### Declaring languages: `.languages`.fr((Déclarer les langues: `.languages`.))

The `.languages` directive declares the possible languages which can be found in the sources, assign them
a code and an optional associated ISO code, and optionally tells which code is the *main* language.
.fr((La directive `.languages` déclare les langues utilisables dans les fichiers sources en leur affectant
un code, un code ISO associé et facultatif, et en indiquant éventuellement le code *main* de la langue
*principale*..))

The *main* language has files generated without the language code suffix, e.g. `README.md` while other
languages will have the language code suffix, e.g. `README.fr.md`.
.fr((La langue *principale* a pour seule particularité que les fichiers générés pour cette langue
auront l'extension `.md` sans le code de langue par exemple `README.md`, par opposition aux autres
langues dont les fichiers auront l'extension `.code.md`, par exemple `README.fr.md`..))

#### Syntax.fr((Syntaxe.))

The `.languages` directive lies alone on a line and is followed by the list of language codes to be
used in all source files, optionally associated to an ISO code. One code can be declared as the
main language.
.fr((La directive `.languages` est située seule sur une ligne et est suivie d'une liste de codes
pour chacune des langues utilisées dans les fichiers sources, chaque code povant être associé à un
code ISO facultatif; L'un des codes peut être déclaré comme langue principale..))

```code
.languages <code>[=<iso>][,...] [main=<code>]
```

Each  `<code>` declares a language which can then be used with `.<code>((` directives to start text
sections for the `<code>` language.
.fr((Chaque `<code>` déclare une langue qui pourra être utilisée avec la directive `.<code>((` qui
ouvrira une section de texte rédigée dans cette langue..))

The optional `main=<code>` parameter tells which language is the main language: files generated for
this main language will have an `.md` extension instead of a `.<code>.md` extension. As an example,
the `README.base.md` source file will generate a `README.md` for the main language and
`README.<code>.md` for other language codes. This is particularly useful with Git deposits which
require a `README.md` file at the deposit root.
.fr((Le paramètre facultatif `main=<code>` indique la langue principale : les fichiers générés pour ce
code de langue auront une extension simple `.md` au lieu de `.<code>.md`. Par exemple, le fichier
source `README.base.md` génèrera un fichier `README.md` pour la langue principale et des fichiers
`README.<code>.md` pour chacun des autres codes de langue. Ceci est utile pour les documents destinés
à des environnements qui contrôlent les fichiers Markdown déposés, comme les dépôts Git qui exigent un
fichier `README.md` en racine du dépôt..))

#### Notices.fr((Remarques.))

- No file is generated before the `.languages` directive is met: any preceeding text will be ignored.
- The directive has a global effect oevr all the source files so it can be put in the first processed
file. If there is any doubt about which file will be processed first, the directive can be put in all
the sources with no undesirable effect. The order can also be choosen with a `.topnumber` directive
in each source file.
- After the `.languages` directive, the generator will consider all text as default text
and send it to all languages files until a language opening directive changes this.
.fr((
- Aucun fichier n'est généré avant qu'une directive `.languages` ait été localisée dans tous les fichiers
sources. Tout texte précédant cette directive sera ignoré.
- La directive est globale à tous les fichiers sources, elle peut donc être placée dans le premier fichier
traité. En cas de doute sur l'ordre dans lequel les fichiers seront traités, on peut placer la même directive
au début de chaque fichier sans effet indésirable. L'ordre peut également être forcé en plaçant une directive
`.topnumber` dans chaque fichier source.
- Après la directive `.languages`, le générateur se place en mode texte par défaut et enverra tout texte à
toutes les langues jusqu'à ce qu'une directive d'ouverture de langue change cela.
.))

#### Example.fr((Exemple.))

```code
.languages en=en_US,fr main=en
```

Generated files will be named with a `.md` extension for the `en` language and with `.fr.md` for
the `fr` language.
.fr((Avec cette directive les fichiers seront générés avec une extension `.md` pour la langue du code
`en` et `.fr.md` pour la langue `fr`..))

### Defining a numbering scheme: `.numbering`.fr((Définition d'un schéma de numérotation : `.numbering`.))

The `.numbering` directive defines the numbering scheme for current file headings and TOC lines.
The syntax is identical to the `-numbering` command line argument.
.fr((La directive `.numbering` définit le schéma de numérotation pour le fichier actuel et les sommaires.
La syntaxe est identique à celle du paramètre `-numbering` de la ligne de commande..))

> WARNING: the `-numbering` command line argument has global effect on all files, while the `.numbering`
directive only applies to the file where it appears.
.fr((> ATTENTION : le paramètre de ligne de commande s'applique à tous les fichiers sources, tandis
que la directive permet de modifier le schéma pour le fichier où elle apparait..))

#### Syntax.fr((Syntaxe.))

.((
```code
.numbering [<level>]:[<prefix>]:<symbol>[<separator>][,...]]
```
.)).fr((
```code
.numbering [<niveau>]:[<préfixe>]:<symbole>[<séparateur>][,...]]
```
.))

Following are details about each definition part. These are identical as for the command line parameter.
.fr((Voici une description des parties de la définition de niveau. Elles sont identiques aux
paramètres de la ligne de commande..))

- `<level>` is optional and is a digit between `1` and `9` representing the heading level (which is the number of '#' at
the heading beginning). By default, this defines the next level, starting with 1 and incrementing at each definition.
- `:` is a mandatory separator between parts of the definition, even for the empty ones.
- `prefix` is an optional prefix for the level numbering, e.g. '`Chapter `'. The prefix only appears in the level numbering
for the heading of this level, and will be omitted from inferior levels numbering.
- `<symbol>` is a mandatory symbol which can be an uppercase letter `A` to `Z`, a lowercase letter from `a` to `z`,
a digit from `1` to `9` or the spcial notation '&I' or '&i' for uppercase or lowercase Roman numbers. It sets the starting
value for the level numbering, except for Roman numbers which always start at `I`.
- `separator` is an optional symbol which will be concatenated to the numbering symbol before the next level numbering.
Conventional symbols can be `.`, `-`or `)`. Omitting this separator for the last level is identical to using `.`.
- `,` is a separator before the next level definition.
.fr((
- `<niveau>` est un chiffre entre `1` and `9` facultatif qui indique le ,niveau de titre concerné (c'est le nombre de `#`
qui débute le titre). Par défaut c'est le niveau suivant celui de la définition précédente, en commençant par 1.
- `:` est un séparateur obligatoire entre chacune des parties de la définition, même pour les parties omises.
- `préfixe` est un préfixe facultatif pour le tout premier niveau de titre, par exemple `Chapitre `. Le préfixe n'apparait
que dans le libellé des titres de premier niveau, même s'il est spécifié pour un autre niveau.
- `<symbole>` est un syùbole obligatoire qui peut être une lettre majuscule `A` à `Z`, une lettre minuscule `a` à `z`,
un chiffre de `1` à `9` ou la mention spéciale `&I` ou `&i` pour représenter les chiffres romains en majuscules
ou minuscules. Ce symbole indique la valeur de départ pour la numérotation du niveau, sauf pour les chiffres romains
qui commencent toujours à `I` ou `i`.
- `séparateur` est un caractère facultatif qui sera écrit après les symboles de numérotation de ce niveau. Les symboles
séparateurs les plus courants sont `.`, `-` ou `)`. Par défaut les niveaux de la numérotation sont séparés par un `.`.
- `,` sépare les différentes définitions de niveau.
.))

A level N always starts with the defined symbol, then all the following headings at the same level N will increment
this symbol until a heading with a level N-1 above will reset the current level N, and continue with the next number
in the setting for the above level N.
.fr((Le premier titre d'un niveau N est numéroté avec le symbole indiqué, les suivants au même niveau N seront ensuite
incrémentés jusqu'à ce que survienne un titre de niveau supérieur N-1 qui réinitialisera la prochaine séquence de
niveau N au symbole de départ..))

### Numbering level 1 heading: `topnumber`.fr((Numéro de titre niveau 1 : `.topnumber`.))

The `.topnumber` directive defines the starting number for the level 1 heading in the current file for the
numbering scheme set by `.numbering` or the `-numbering`command line parameter. This 
can be used to number successive source files in table of contents. Each file has only one level 1 heading.
If the `.topnumber` directive is used in files, they will be processed in the order defined by this
directive.
.fr((La directive `.topnumber` définit le numero du titre de niveau 1 du fichier actuel au sein du schéma de
numérotation défini par `.numbering` ou le paramètre `-numbering`de la ligne de commande. Ce numéro peut
être utiliser pour numéroter les fichiers successifs dans un sommaire général. Chaque fichier possède un
seul titre de niveau 1. Si la directive `.topnumber` est utilisée dans les fichiers, ils seront traités dans
l'ordre défini par ces directives..))

#### Syntax.fr((Syntaxe.))

```code
.topnumber <n>
````

The parameter `n` can be any integer number starting at 1. Each file should have a unique number, as using
identical numbers will have unpredictable effects.
.fr((Le paramètre `n` est n'importe quel nombre entier à partir de 1. Chaque fichier doit avoir un numéro unique,
car l'utilisation de numéros identiques aura des effets imprévisibles..))

### Generating Table Of Content: `.toc`.fr((Génération de sommaire : `.toc`.))

The `.toc` directive generates a Table Of Contents using choosen header levels. The header levels are defined
by the number of `#` prefixes in Markdown syntax: `#` is header level 1 which is unique in a file, `##` is
level 2 etc.
.fr((La directive `.toc`génère un sommaire à partir des niveaux de titres qui lui sont indiqués. Dans la
syntaxe Markdown, ces niveaux sont définis par le nombre de caractères `#` en début de ligne : `#` est pour
le titre de niveau 1 qui doit être unique dans le fichier, `##` pour les titres de niveau 2 etc..))

By default, level 1 is ignored: it is considered as the file title, and levels 2 to 4 are put in TOC.
But level 1 can be used to build a global TOC for the headings from the full set of files. Such a global
TOC is generally placed in tyhe main file from which all other files can be accessed.
.fr((Par défaut, le titre de niveau 1 est ignoré dans les sommaires car il est considéré comme le titre
du fichier, et le sommaire inclut les niveaux de titre 2 à 4. Mais le niveau 1 peut être ajouté
pour générer un sommaire global des titres de tous les fichiers. Un tel sommaire global est généralement
placé dans le fichier principal à aprtir duquel on peut accéder aux autres fichiers..))

The Table of Contents has one link for each accepted heading.
.fr((Le sommaire insère un lien vers chaque titre de chaque fichier qu'il inclut.))

.((
> The table will be put at the place of the `.toc` directive.
> The table has an automatic anchor named `toc` which can be used in links from other files.
> If a numbering scheme has been set with the `-numbering` script argument or
  `.numbering` directive, it will be used for the toc headings.
> The TOC title is written as a level 2 heading in the generated files.
.)).fr((
> Le sommaire sera placé à l'endroit de la directive `.toc`.
> Le sommaire reçoit une ancre nommée ou idéntifiée `toc` qui peut être utilisée comme cible
  dans les fautres fichiers.
> Si un schéma de numérotation a été programmé avec le paramètre `-numbering` ou une directive
  `.numbering`, il sera utilisé pour les titres placés dans le sommaire.
> Le titre du sommaire est écrit comme un titre de niveau 2 dans les fichiers générés.
.))

#### Syntax.fr((Syntaxe.))

The `.toc` directive must be written alone on its line with its parameters. Most of the time, the TOC
lies after the file title and some introduction. A default TOC with no parameters will build a table
of contents for the current file with headings `##` to `####`. (Level 2 to 4 headings.)
.fr((La direfctive `.toc` doit être écrite sur une ligne isolée avec ses paramètres. La plupart du
temps elle se sotue après le titre du fichier et une introduction. Un sommaire sans
aucun paramètre écrira la liste des titres `##` à `####` du fichier en cours (niveaux 2 à 4)..))

.((
```code
.TOC [level=[m][-][n]] [title=<title text>] [out=md|html]
```
.)).fr((
```code
.TOC [level=[m][-][n]] [title=<texte de titre>] [out=md|html]
```
.))

##### `level` parameter.fr((Paramètre `level`.))

This parameter sets the heading levels which will appear in the TOC.
.fr((Ce paramètre choisit les niveaux des titres qui apparaitront dans le sommaire..))

Syntax for this parameter is `level=[m][-][n]`:
.fr((La syntaxe pour ce paramètre est `level=[m][-][n]` :.))

.((
- If neither `m` nor `n` are given, the TOC will contain heading levels 2 to 4 (matching
  headings `##` to `####`).
- If `m` only is given, TOC titles will be level `m` headings only.
- If `m-` is given without `n`, TOC titles will be level `m` to level 9 headings.
- If `m-n` is given, TOC titles will be level `m` to level `n` headings.
- If `-n` is given, TOC titles will be level 1 to level `n` headings.
.)).fr((
- Si ni `m` ni `n` ne sont indiqués, les niveaux 2 à 4 seront retenus.
- Si `m` seulement est fourni, seuls les titres de niveau `m` seront retenus.
- Si `m-` est fourni sans `n`, les niveaux `n`à 9 seront retenus.
- Si `m-n` est fourni, les niveaux `m` à `n` seront retenus.
- Si `-n` est fourni, les niveaux 1 à `n` seront retenus.
.))

##### `title` parameter.fr((Paramètre `title`.))

This parameter is followed by text which will be placed as a level 2 (`##`) heading right
before the table.
.fr((Ce paramètre est suivi d'un titre quis era placé comme titre de niveau 2 (`##`))) juste
avant le sommaire..))

.((
- The title text can use language, all, ignore and default directives just like any other text.
- If no title text is given, `Table Of Contents` will be used.
- Everything that follows `title=` is used as title text until either the end of the line,
  either the `level=`parameter.
.)).fr((
- Le titre du texte peut utiliser les directives de langue, all, ignore et default comme
  le reste du texte.
- Si aucun titre n'est fourni, `Table Of COntents` sera écrit.
- Tout ce qui suit `title=` jusqu'à la fin de ligne ou jusqu'au paramètre `level=` est
  utilisé dans le titre.
.))

#### Examples.fr((Exemples.))

```code
.TOC level=1-3 title=2,".fr((Table des matières.)).en((Table Of Contents))"
```

This directive generates a TOC using the headings `#` to `###` found in each file. The order
of files in the table will be either the one dictated by `.topnumber` directives in files,
either the 'natural' order of files in directories, which is generally the order they were written
to for the first time and is not easily controllable.
.fr((Cette directive place une table des matières à partir des niveaux `#` à `###` des titres
trouvés dans tous les fichiers traités. L'ordre des fichiers est soit dirigé par les directives
`.topnumber` trouvées dans les fichiers, soit celui dans lequel les fichiers ont été créés dans
les répertoires la première fois, ce qui n'est pas facilement contrôlable..))

The table title will be `## Table Of Contents` by default in any language.
.fr((Le titre des sommaires est `Table Of Contents` par défaut dans toutes les langues..))

### Generating for all languages: `.all((`.fr((Texte pour toutes les langues : `.all((`.))

The `.all((` directive starts a section of text which will be put in each of the languages
files declared in the `.languages` directive.
.fr((La directive `.all((` ouvre une section de texte qui sera écrite dans les fichiers de toutes
les languaes déclarées dans `.languages`..))

This directive is ended or suspended by any of the following conditions:
.fr((Cette directive est suspendue ou terminée lorsque l'une des conditions suivantes se présente :.))

.((
- The `.))` directive which returns to previous state.
- The `.<code>((` directives which start a language specific section of text.
- The `.ignore((` directive which starts ignored text.
- The `.default((` or `.((` directive which starts the default value for a section of text.
.)).fr((
- Une directive `.))` ferme la section de texte et retourne au contexte précédent.
- Une directive `.<code>((` démarre une section pour une des langues déclarées dans `.languages`.
- Une directive `.ignore((` démarre une section de texte ignoré.
- Une directive `.default((` ou `.((` démarre une section de texte par défaut.
.))

By default, any text outside directives and appearing after the `.languages` directive
is generated as default text in all the languages files with no specific text as if it were
in a `.((` section.
.fr((Par défaut, tout texte en dehors des directives d'ouverture et de fermeture de langue
est considéré comme du texte par défaut écrit dans tous les fichiers des langues qui n'ont pas de
section spécifique, comme si une directive `.((` était active..))

#### Syntax.fr((Syntaxe.))

```code
.all((
```

#### Examples.fr((Exemples.))

Directives can always be alone on a line, surrounding the text they act on:
.fr((Les directives peuvent être placées seules sur une ligne autour du texte sur lequel elles agissent :.))

.((
```code
.all((
text for all languages
.))
```
.)).fr((
```code
.all((
texte pour toutes les langues
.))
```
.))

They can also be put inline within text:
.fr((Elles peuvent également être placées n'importe où dans le texte :.))

.((
```code
.en((text for 'en' language .all((text for all languages.)) rest of text for 'en' language.))
```
.)).fr((
```code
.fr((texte pour la langue 'fr' .all((texte pour toutes les langues.)) suite du texte pour 'fr'.))
```
.))

And they can be embedded within headings:
.fr((Et elles peuvent être insérées dans les titres :.))

.fr((
```code
# .en((Heading text for English .all(added text for all languages.)) heading text for English again .)) text for all languages
```
.)).fr((
# .fr((Texte du titre en français .all(added text for all languages.)) suite du texte en français .)) texte pour toutes les langues
))

Remember that by default, text goes in all the language files with no specific section. This défault context
is resumed when no language secific section is active anymore, as it is at the end of the exemple above after the
last `.))` directive.
.fr((Rappel : par défaut, le texte va dans les fichiers de toutes les langues qui n'ont pas de section spécifique.
Ce contexte par défaut est restauré lorsqu'aucune directive d'ouverture n'est plus active, comme c'est le cas
à la fin du titre exemple ci-dessus après la dernière directive `.))`..))

### Default text: `.default((` or `.((`.fr((Texte par défaut : `.((` ou `.default((`.))

The `.default((`  or `.((` directive starts a default text section which will be put in
the generated language files for which no specific language section is available after this
default section.
.fr((La directive `.default((` ou `.((` ouvre une section dans laquelle le texte
ira dans toutes les langues qui n'auront pas de section spécifique à la suite de ce texte
par défaut..))

This directive is not generally needed as it is always active when no language specific
section is. It applies to all the upcoming text until either a closing or an opening
language directive is met.
.fr((Cette directive n'est en général pas nécessaire car elle est en permanence active si aucune
directive de langue n'a ouvert une section spécifique. Elle concerne tout le texte à venir jusqu'à
ce qu'une ouverture ou fermeture de langue soit rencontrée..))

Putting text in `.default((` is **not** the same as `.all((`:
.fr((Une section de texte par défaut n'est **pas** équivalente à une section `.all((` :.))

.((
- Text for all languages will unconditionally go in each generated file for each language.
- Default text will only go in files for which there is no language section following it.
.)).fr((
- Le texte pour toutes les langues ira dans chaque fichier de chaque langue inconditionellement.
- Le texte par défaut ira uniquement dans les fichiers des langues qui n'auront pas de section
  spécifique à la suite du texte par défaut.
.))

The goal of the `.default((` directive is to prepare the original text and headings in a
common language like english, then add language specific sections on the fly while still having
the default text for languages which are not translated yet.
.fr((La raison d'être du txete par défaut est de préparer le texte original du document et des tuitres
dans une langue courante comme l'anglais, puis d'ajouter les sections spécifiques à la volée tout en
disposant du texte original par défaut pour les langues qui n'auront pas encore été traduites.))

#### Syntax.fr((Syntaxe.))

```code
.default((
```

or:.fr((ou :.))

```code
.((
```

#### Examples.fr((Exemples.))

An sepcial use of default text is in headings, because the `#` is handled separately and
is automatically written for all languages by MLMD without the need to use directives, and the default
context is restored after this prefix:
.fr((Les titres sont un cas spécial de texte par défaut car leur préfixe `#` est traité séparément
par MLMD et écrit dans les fichiers de toutes les langues, puis le contexte par défaut est restauré
pour le texte qui suit le préfixe :.))

```code
# .Main Title.fr((Titre principal.))
```

This will put `# Main Title` in all the generated files except the `.fr.md` file where the
generator will put `# Titre Principal`.
.fr((Ceci placera `# Main title` dans tous les fichiers générés sauf le fichier français `.fr.md`
qui recevra `# Titre principal`..))

For text blocks, the default text can be put right before the language specific sections, or it
can be explicitely placed into opening default and closing directives to avoid ambiguity. Single
end of lines will be ignored when they only separate closing and opening directives with no text
in between, which permits a visual separation of blocks.
.fr((Pour les blocs de texte, le texte par défaut peut être placé juste avant les sections
spécifiques aux langues lui correspondant, ou il peut être placé explicitement entre les directives
d'ouverture de défaut et de fermeture pour supprimer toute ambiguité. Les fins de ligne simples
sont ignorée lorsqu'elles ne séparent que les directives d'ouverture et de fermeture ce qui permet
de séparer visuellement les blocs.))

Here the default text is directly followed by a french translation and explicit default `.((`
directive is not needed:
.fr((Ici le texte par défaut est directement suivi par une traduction en français et il n'y
a pas besoin de spécifier une directive `.((` :.))
```code
This is the default original text..fr((Ceci est la traduction en français..))
```

In the following example, the default and specific sections are explicit to avoid
any ambiguity:
.fr((Dans l'exemple ci-dessous, les sections de texte par défaut et spécifiques sont explicitement
marquées pour éviter toute ambiguité :.))

```code
.((
This is the default original text.
.)).fr((
Ceci est la traduction en français.
.))
```

### Ignoring text: `.ignore` or `.!((`.fr((Texte ignoré : `.ignore((` ou `.!((`.))

The `.ignore` directive starts an ignored section of text. Ignored text won't be put in
any generated file. It is useful for many tasks:
.fr((La directive `.ignore` démarre une section de texte qui ne sera écrite dans
aucun fichier d'aucune langue. Elle a plusieurs utilités :.))

.((
- comments about the source file or text sections
- TODO lists in source files
- work in progress text sections which are not ready for publishing yet
.)).fr((
- commentaires dans les fichiers sources
- écrire les listes TODO de tâches restant à effectuer
- marquer les sections de texte encore à l'ébauche qui ne sont pas encore prêtes pour publication
.))

This directive is ended or suspended by:
.fr((Elle peut être suspendue ou terminée par :.))

.((
- The `.))` directive which returns to previous state.
- The `.all((` directive which starts a section for all languages.
- The `.<code>((` directives which start a language specific section of text.
- The `.default((` or `.((` directive which starts the default value for a section of text.
.)).fr((
- Une directive `.))` qui termine le texte ignoré et restaure le contexte précédent.
- Une directive `.all((` qui démarre du texte pour toutes les langues.
- Une directive `.<code>((` qui démarre le texte spécifique à une langue.
- Une directive `.((` ou `.default((` qui démarre du texte par défaut.
.))

#### Syntax.fr((Syntaxe.))

```code
.ignore((
```

#### Example.fr((Exemple.))

The directive can be applied to full blocks of text:
.fr((La directive peut s'appliquer à des blocs entiers de texte :.))

```code
.ignore((
text to ignore
.))
```

The directive can also appear in default or language specific text:
.fr((La directive peut également se trouver à l'intérieur de texte par défaut ou d'une langue :.))

.((
```code
Text to generate .ignore((text to ignore.)) following text to generate
# Title for all languages .ignore((ignore this.)) title following
```
.)).fr((
```code
Texte à générer .ignore((texte à ignorer.)) suite du texte à générer
# Titre pour toutes les langues .ignore((text ignoré.)) suite du titre
```
.))

### Generating for languages: `.<code>((`.fr((Texte pour une langue : `.<code>((`.))

The `.<code>((` directive starts a section of text which will only be put in the generated
file for the language whose code `<code>` has been declared in the `.languages` directive.
.fr((La directive `.<code>` démafrre une section de texte destinée uniquement à la langue
dont le code `<code>` a été déclaré dans la directive `.languages`..))

This directive is ended or suspended by:
.fr((Cette directive est suspendue ou terminée par :.))

.((
- The `.))` directive which returns to previous state.
- The `.all((` directive which starts a section for all languages.
- Another `.<code>((` directives which starts a language specific section of text.
- The `.default((` or `.((` directive which starts the default value for a section of text.
- The `.ignore` or `.!((` directive which starts ignored text.
.)).fr((
- Une directive `.))` qui termine le texte ignoré et restaure le contexte précédent.
- Une directive `.all((` qui démarre du texte pour toutes les langues.
- Une directive `.<code>((` qui démarre le texte spécifique à une langue.
- Une directive `.((` ou `.default((` qui démarre du texte par défaut.
- Une directive `.ignore((` ou `.!((` qui démarre du texte ignoré.
.))

Language sections must be closed by a matching `.))`. Although sections can be chained,
it is recommended to close a section before beginning an other one, else you'll have to
close all of them at the end of sections. See examples below for language chaining.
.fr((Ls sections propres à une langue doivent être fermées par `.))`. Bien que les
sections puissent s'enchainer il est conseillé de femer la précédente avant d'en ouvrir
une nouvelle sans quoi il faudra toutes les fermer à la fin des sections de chaque langue.
Les exemples ci-après illustrent l'enchainement de langues..))

#### Syntax.fr((Syntaxe.))

```code
.<code>((
```

In this syntax, `<code>` is one of the codes declared after the `.languages` directive
at the source files start. The angle brackets `<` and `>` are only for notation and not part
of the code and should not be entered.
.fr((Dans cette syntaxe, `<code>` est l'un des codes déclarés dans `.languages` au début des 
fichiers sources. Les crochets `<` et `>` sont uniquement présents pour la notation et ne
doivent pas être saisis autour du code..))

#### Examples.fr((Exemples.))

The directive can enclose text or headings:
.fr((La directive peut entourer du texte ou des titres :.))

```code
.en((
Text for English language only.

### Heading for English generated file
.))
```

It can also be put inline within text or headings:
.fr((Elle peut également intervenir à l'intérieur du texte ou des titres :.))

```code
.fr((Texte pour le fichier en Français.)).en((text for the English file.))

# .fr((Titre en Français.)).en((English Title.))
```

Notice that the apparently ending '.' in titles is in fact the dot from the `.))` 
closing directive. This somewhat misleading visual effect can be avoided by using spaces:
.fr((Il faut remarquer que le point `.` final est en réalité une partie de la directive de
fermeture `.))`. Cet effet visuel un peu trompeur peut être évité en utilisant des espaces :.))

```code
.fr((Un peu de texte en Français. .)).en((Some english text. .))
```

The spaces between directives are generally default text and will restore the default context,
which can have undesired effects as it would break the current default/specific textr chain.
To put a space after some text it is best to put it inside the language blocks:
.fr((Les espaces entre des directives sont généralement du texte par défaut et restaurent le
contexte par défaut, ce qui peut avoir des effets indésirables car cela rompt la chaine des textes
par défaut et spécifiques en cours. Pour utiliser des espaces il est donc préférable de les placer
à l'intérieur des directives ouvrantes et fermantes :.))

```code
.fr((Texte en Français suivi d'un espace .)).en((English text followed by a space .))
```

As mentioned above, language sections can be chained without closing them, but each one will
have to be closed eventually. The line below has the same effect as the previous example:
.fr((Comme expliqué précédemment, les sections de langues peuvent être enchainées sans
les fermer, toutefois chacune devra finalement être refermée. La ligne suivante a le même effet
que l'exemple précédent :.))

```code
.fr(( Texte en Français .en(( English text .)).))
```

Notice that there are two successive closing directives at the end of the line.
.fr((On remarque les deux directives de fermeture en fin de ligne..))

A opened section stays active until it is closed or until next directive is met. In the
next example, the closing on the first line ends the `.en` section, but the `.fr` stays active
and the following text will be generated in the `.fr.md` file. The example shows other
effects of opening and closing directives.
.fr((Une section ouverte reste active jusqu'à ce qu'elle soit fermée ou qu'une autre
directive ouvrante soit trouvée. Dans l'exemple suivant, la première fermeture termine
la section `.en`, mais la section `.fr` reste active et le texte ira dans le fichier
`.fr.md`. La sjuite de l'exemple montre d'autres effets des ouvertures et fermetures..))

```code
This text has no directive and will go in all files.
.fr(( Texte en Français .en(( English text .))
This text will only go into the french file because the opening . fr (( directive has not
been closed yet. .))
Now this text is in the `all` section and go in all files.
# .fr(( Titre en Français .en(( English Title .))
This text will only go into the french file because its opening directive has not been closed yet.
```

### Escaping text: `.{` and `.}`.fr((Texte échappé : `.{` et `.}`.))

Text can be 'escaped' by surrounding it with `.{` and `.}`.
.fr((Le texte peut être 'échappé' en l'entourant des directives `.{` et `.}`..))

In the escaped text, directives and variables are ignored and text is copied as-is in the
generated files.
.fr((Dans le texte échappé, les directives et variables sont ignorées par MLMD qui
écrit le texte à l'identique dans les fichiers générés..))

In Markdown syntax, text can also be escaped by surrounding it with single or multiple
back-ticks .{`.}, code fences .{```.} or double quotes `"`. MLMD will respect these Markdown
escaping and forward the escaped text with its escape markers into generated files while
ignoring any variables and directives in it. The difference with MLMD escaping directives is that
these last directives `.{` and `.}` will not be written and only the escaped text will.
.fr((En syntaxe Markdown, le texte peut également être échappé en l'entourant d'accents inversés
multiples .{`.}, de barrières de code .{```.} ou de guillemets `"`. MLMD respectera ces
échgappements Markdown et écrira le texte échappé avec ses marqueurs dans les fichiers générés
tout en ignorant toute variable ou directive qui pourrait s'y trouver. La différence avec les
directives d'échappement MLMD est que ces directives `.{` et `.}` ne seront pas écrites et seul
le texte échappé ira dans les fichiers générés..))

### Examples.fr((Exemples.))

The `Examples` directory has a few `mlmd` and `base.md` examples sources.
.fr((Le répertoire `Examples` contient divers fichiers sources exemples..))

## Conclusion

Use MLMD to write multilingual documentations sources instead of maintaining different Markdown
files for each language, then generate each language Markdown files from each source.
.fr((MLMD est utilisé pour rédiger des sources de documentation multilingues tout en maintenant
les différentes parties de la documentation dans des fichiers uniques et générer les
fichiers Markdown de chaque langue à partir des sources..))

Here are some use notes.
.fr((Voici quelques notes d'usage..))

.((
- Files
  - Source files must be UTF-8 encodedx
  - Use the `.mlmd` extension to distinguish MLMD sources from actual Markdown files
  - Use the `-numbering` script argument to consistently number headings over all files and in TOCs
  - Use the '-out' script argument to have anchors and links adapted to your MD or HTML context
  - Use `-i` script arguments to choose the files to process, or omit `-i` to process all the
    source files in current directory and subdirectories
  - Use the `-od` parameter to generate files in a choosen directory
.)).fr((
- Fichiers
    - Les fichiers sources doivent être encodés en UTF-8
    - l'extension `.mlmd` est utilisée pour distinguer les sopurcs MLMD des fichiers Markdown
    - le paramètre `-numbering` permet de numéroter l'ensemble des titres des fichiers sources de façon homogène
    - le paramètre `-out` permet de choisir le style des ancres et des liens selon le contexte Markdown ou HTML ciblé
    - le paramètre `-i` permet de choisir manuellement les fichiers sources, en son absence tous les fichiers trouvés seront traités
    - le paramètre `-od` permet de choisir le répertoire où seront générés les fichiers Markdown
.))

.((
- Languages and sections
  - Language codes are declared in a `.languages` directive
  - Codes are global to all the source files
  - An optional ISO code can be associated to each language code
  - Any text before the first `.languages` directive is ignored
  - Any language declared with code `<code>` has an opening directive `.<code>((`
  - Any language section must be closed with `.))``
  - Any text outside open/close directives is default text
  - Or use `.((` to open a default text section
  - Default text section are written to all language file for which no language specific section exists
  - Use `.all((` to unconditionally send text into all languages files
  - Use `.!((` to ignore text
.)).fr((
- Langues et sections
  - Les codes des langues sont déclarés dans la directive `.languages``
  - Les codes sont valables sur l'ensemble des fichiers sources traités
  - Un code ISO facultatif peut être associé à chaque code de langue
  - Tout texte est ignoré jusqu'à la rencontre de la directive `.languages``
  - Toute langue déclarée avec le code `<code>` possède une directive d'ouverture `.<code>((`
  - Toute section ouverte doit être fermée avec `.))``
  - Tout texte en dehors des directives d'ouverture et fermeture est du texte par défaut
  - Ou on utilise `.((` pour ouvrir une section de texte par défaut
  - Les sections et le texte par défaut sont écrits dans tous les fichiers des langues qui n'ont pas de section spécifique
  - On utilise `.all((` pour forcer l'écriture dans les fichiers de toutes les langues
  - On utilise `.!((` pour du texte à n'écrire dans aucun fichier
.))

.((
- Headings and text
  - Headings must have a `#` Markdown prefix
  - Put default text for each paragraph and heading before opening languages specific sections
  - Close each opened section with a `.))`
  - Use one end-of-line between directives to visually separate different sections
  - Use the variables to put language specific links or images in text body
  - Markdown styles '===' and '---' for level 1 and 2 are not recognized
.)).fr((
- Titres et texte
  - Les titres doivent avoir un préfixe de style Markdown `#' en début de ligne
  - Placez le texte par défaut de vos paragraphes et titres avant d'ouvrir les sections spécifiques aux langues
  - Fermez chaque section avec `.))`
  - Utilisez des fins de ligne entre les directives pour séparer visuellement les sections
  - Utilisez les variables dans le texte ou dans des liens spécifiques à une langue ou un fichier
  - Le style de titres Markdown '===' et '---' pour les niveaux 1 et 2 n'est pas reconnu
.))

.((
- Table Of Contents (`.toc` directive)
  - Use `level=1` to generate a global TOC with links to all the processed sources
  - Use levels 2 to 9 for a local TOC with links to headings in the file
  - Give your `.toc` directive a title, it will become a level 2 heading in current file
  - Place your `.toc` directive after a level 1 heading and introductory text
  - Use links to `#toc` anchor to place a link to the TOC in your text
.)).fr((
- Sommaire (directive `.toc`)
  - Utilisez `level=1` pour générer un sommaire avec des liens vers chacun des fichiers traités
  - Utilisez les niveaux 2 à 9 pour un sommaire local du fichier en cours
  - Donnez un titre à votre sommaire, il aura le niveau 2 dans le fichier en cours
  - Placez la directive `.toc` après le titre de niveau 1 et une introduction
  - Ciblez `#toc` dans un lien vers le sommaire
.))

I hope MLMD will help you to easily maintain multilingual documentations.
.fr((J'espère que MLMD vous aidera à maintenir facilement vos documentations multilingues..))

Stay safe and protect others.
.fr((Prenez soin de vous et des autres.))

Francis Piérot
August-December 2020
Dedicated to my father Serge, 1932-2020.